
// ************************************
// Snackbar
// ************************************
final View coordinatorLayout = findViewById(R.id.coordinatorLayout);
Snackbar snackbar = Snackbar
        .make(coordinatorLayout, "Message is deleted", Snackbar.LENGTH_LONG)
        .setAction("UNDO", new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, "Message is restored!", Snackbar.LENGTH_SHORT);
                snackbar1.show();
            }
        });
snackbar.show();


// ************************************
// Datetime Picker
// ************************************
final BottomSheetDialog datetimePicker = new BottomSheetDialog(context);
View sheetView = getLayoutInflater().inflate(R.layout.bottom_sheet_dialog_datetime_picker, null);
DateTimePickerControl dateTimePickerControl = sheetView.findViewById(R.id.datetimePicker);
dateTimePickerControl.setOnTimeChangedListener(new DateTimePickerControl.OnTimeChangedListener() {
    @Override
    public void onTimeChanged(DateTimePickerControl view, Enumerates.ConfirmationState confirmationState, DatetimeModel datetimeModel) {
        if (confirmationState == Enumerates.ConfirmationState.OK) {
            // DONE
            datetimePicker.dismiss();
        } else if (confirmationState == Enumerates.ConfirmationState.CANCEL) {
            // CANCEL
            datetimePicker.dismiss();
        }
    }
});
datetimePicker.setContentView(sheetView);
datetimePicker.show();



// ************************************
// Requests
// ************************************
public static void create(JSONObject param) {
    Requests request = new Requests(
            Request.Method.POST,
            Config.LOGIN_URL,
            null,
            param,
            new Error(),
            new Response.Listener<NetworkResponse>() {
                @Override
                public void onResponse(NetworkResponse response) {
                    switch (response.statusCode) {
                        case StatusCodes._200:
                            Convertor.toJSONArray(response);
                            Convertor.toObject(response, new TypeToken<ArrayList<UserModel>>(){}.getType());
                            break;
                        case StatusCodes._201:
                            break;
                    }
                }
            }
    );
    App.getInstance().addToRequestQueue(request, "API_NAME as TAG");
}



// ************************************
// Dialog
// ************************************
public static Button dialog(final Dialog dialog, Context context, Keys.MessageState messageState, String strHeader, String strBody, SpannableStringBuilder sbBody) {

    dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
    dialog.setCancelable(false);
    dialog.setContentView(R.layout.view_dialog);

    //FrameLayout header = (FrameLayout) dialog.findViewById(R.id.header);
    TextView header_text = (TextView) dialog.findViewById(R.id.header_text);
    TextView text_body = (TextView) dialog.findViewById(R.id.text_body);
    ImageView header_symbol = (ImageView) dialog.findViewById(R.id.header_symbol);
    Button cancel = (Button) dialog.findViewById(R.id.btn_cancel);
    Button ok = (Button) dialog.findViewById(R.id.btn_ok);

    header_text.setText(strHeader);
    text_body.setText(sbBody != null ? sbBody : strBody);


    ok.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            //dialog.dismiss();
        }
    });
    cancel.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            dialog.dismiss();
        }
    });

    if(messageState == Keys.MessageState.INFO) {
        cancel.setVisibility(View.GONE);
        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT,
                (int) Config.DEVICE_DENSITY * 40));
        params.addRule(RelativeLayout.CENTER_IN_PARENT);
        params.addRule(RelativeLayout.BELOW,R.id.text_body);
        ok.setLayoutParams(params);
    }

    if(messageState == Keys.MessageState.INFO) {
        ok.setBackgroundColor(context.getResources().getColor(R.color.info));
        //header.setBackgroundColor(context.getResources().getColor(R.color.info));
        header_symbol.setImageResource(R.drawable.ic_info);
    } else if(messageState == Keys.MessageState.WARNING) {
        ok.setBackgroundColor(context.getResources().getColor(R.color.warning));
        //header.setBackgroundColor(context.getResources().getColor(R.color.warning));
        header_symbol.setImageResource(R.drawable.ic_warning);
    } else if(messageState == Keys.MessageState.ERROR) {
        ok.setBackgroundColor(context.getResources().getColor(R.color.error));
        //header.setBackgroundColor(context.getResources().getColor(R.color.error));
        header_symbol.setImageResource(R.drawable.ic_error);
    }

    dialog.show();

    return ok;
}



// ************************************
// Invoke UI Thread
// ************************************
((MainActivity) context).runOnUiThread(new Runnable() {
    public void run() { }
});



// ************************************
// Square layout
// ************************************
import android.content.Context;
import android.support.v7.widget.AppCompatImageView;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
public class SquareViewControl extends ViewGroup {

    public SquareViewControl(Context context) {
        super(context);
    }

    public SquareViewControl(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public SquareViewControl(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        getChildAt(0).layout(0, 0, r - l, b - t); // Layout with max size
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        View child = getChildAt(0);
        int width = resolveSize(child.getMeasuredWidth(), widthMeasureSpec);
        setMeasuredDimension(width, width);
    }
}



// ************************************
// RecyclerView: change scrolling speed
// ************************************
LinearLayoutManager linearLayoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false) {
    @Override
    public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
        LinearSmoothScroller smoothScroller = new LinearSmoothScroller(context) {

            private static final float SPEED = 1000f;// Change this value (default=25f)

            @Override
            protected float calculateSpeedPerPixel(DisplayMetrics displayMetrics) {
                return SPEED / displayMetrics.densityDpi;
            }
        };
        smoothScroller.setTargetPosition(position);
        startSmoothScroll(smoothScroller);
    }

    @Override
    public void scrollToPosition(int position) {
        super.scrollToPosition(position);
    }
};



// ************************************
// RecyclerView: custom ScrollListener
// ************************************
public class CustomScrollListener extends RecyclerView.OnScrollListener {
    public CustomScrollListener() { }

    public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
        if (newState == RecyclerView.SCROLL_STATE_IDLE) {

            LinearLayoutManager lm = (LinearLayoutManager) recyclerView.getLayoutManager();
            lm.smoothScrollToPosition(recyclerView, null, scrollRight ? position - 2 : position);
        }
    }

    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
        super.onScrolled(recyclerView, dx, dy);

        position = ((LinearLayoutManager)recyclerView.getLayoutManager()).findFirstVisibleItemPosition();

        if (dx > 0) {
            scrollRight = true;
            position--;
        } else {
            scrollRight = false;
        }
    }
}



// ************************************
// RecyclerView:  percentage, item to left or right
// ************************************
private double percentage(RecyclerView recyclerView) {

    int offset = recyclerView.computeHorizontalScrollOffset();
    int extent = recyclerView.computeHorizontalScrollExtent();
    int range = recyclerView.computeHorizontalScrollRange();

    double percentage = (1.0 * offset / (double)(range - extent)) * data.size();
    percentage -= Math.floor(percentage);

    return percentage;
}



// ************************************
// get all Extra from activity
// ************************************
Bundle bundle = i.getExtras();
if (bundle != null) {
    for (String key : bundle.keySet()) {
        Log.e(TAG, "++++++++ " + key + " : " + (bundle.get(key) != null ? bundle.get(key) : "NULL"));
    }
}